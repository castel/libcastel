%token_prefix CASTEL_LEXING_MANGLEDLEXEMETYPES_
%token_type { lex::Lexeme * }

%include {

    #include <cassert>
    #include <list>
    #include <string>

    #include "castel/ast/expr/literal/Boolean.hh"
    #include "castel/ast/expr/literal/Class.hh"
    #include "castel/ast/expr/literal/Dict.hh"
    #include "castel/ast/expr/literal/Function.hh"
    #include "castel/ast/expr/literal/List.hh"
    #include "castel/ast/expr/literal/Null.hh"
    #include "castel/ast/expr/literal/Number.hh"
    #include "castel/ast/expr/literal/String.hh"
    #include "castel/ast/expr/literal/Undefined.hh"
    #include "castel/ast/expr/Binary.hh"
    #include "castel/ast/expr/Conditional.hh"
    #include "castel/ast/expr/External.hh"
    #include "castel/ast/expr/Multary.hh"
    #include "castel/ast/expr/Unary.hh"
    #include "castel/ast/expr/Variable.hh"
    #include "castel/ast/stmt/ctrl/ForIn.hh"
    #include "castel/ast/stmt/ctrl/If.hh"
    #include "castel/ast/stmt/ctrl/Until.hh"
    #include "castel/ast/stmt/ctrl/While.hh"
    #include "castel/ast/stmt/decl/Class.hh"
    #include "castel/ast/stmt/decl/Function.hh"
    #include "castel/ast/stmt/decl/Variables.hh"
    #include "castel/ast/stmt/Expression.hh"
    #include "castel/ast/stmt/Return.hh"
    #include "castel/ast/stmt/Throw.hh"
    #include "castel/ast/Expression.hh"
    #include "castel/ast/Statement.hh"
    #include "castel/lex/Lexeme.hh"

    using namespace castel;

    static bool castelparserIsValid;
    static ast::Statement * castelparserRootStatement;
    static std::list< std::string > castelparserExpectedTokens;

}

%syntax_error {
    castelparserIsValid = false;
    int n = sizeof( yyTokenName ) / sizeof( yyTokenName[ 0 ] );
    for ( int i = 0; i < n; ++ i ) {
        int a = yy_find_shift_action( yypParser, static_cast< YYCODETYPE >( i ) );
        if ( a < YYNSTATE + YYNRULE ) {
            castelparserExpectedTokens.push_back( yyTokenName[ i ] );
        }
    }
}

%left  PostIncrementation PostDecrementation
       Call
       Subscript
       Member.

%right PreIncrementation PreDecrementation
       Positive Negative
       Not BitwiseNot
       New.

%right Require.

%left  Multiplication Division Modulo.

%left  Addition Substraction.

%left  LeftShift RightShift.

%left  Lesser LesserOrEqual
       Greater GreaterOrEqual.

%left  Equal NotEqual.

%left  BitwiseAnd.

%left  BitwiseXOr.

%left  BitwiseOr.

%left  And.

%left  Or.

%right Conditional
       Assignment
       AdditionAssignment SubstractionAssignment
       MultiplicationAssignment DivisionAssignment ModuloAssignment
       LeftShiftAssignment RightShiftAssignment
       BitwiseAndAssignment BitwiseXOrAssignment BitwiseOrAssignment
       Dot.

%nonassoc Incrementation Decrementation
          Plus Minus
          LBrace LBracket LParenthesis
          QuestionMark.

program ::= statementlist(U). { castelparserRootStatement = U; }

%type statementlist { ast::Statement * }
statementlist(A) ::= emptystatementlist statementiterator(U). { A = U; }

    %type statementiterator { ast::Statement * }
    statementiterator(A) ::= statement(U) emptystatementlist statementiterator(V). { A = U; U->next( V ); }
    statementiterator(A) ::= . { A = nullptr; }

    %type emptystatementlist { ast::Statement * }
    emptystatementlist(A) ::= Semicolon emptystatementlist. { A = nullptr; }
    emptystatementlist(A) ::= . { A = nullptr; }

%type statementblock { ast::Statement * }
statementblock(A) ::= LBrace statementlist(U) RBrace. { A = U; }

%type statement { ast::Statement * }
statement(A) ::= openstatement(U). { A = U; }
statement(A) ::= closedstatement(U). { A = U; }

    %type openstatement { ast::Statement * }
    openstatement(A) ::= openifstatement(U). { A = U; }
    openstatement(A) ::= openwhilestatement(U). { A = U; }
    openstatement(A) ::= openuntilstatement(U). { A = U; }
    openstatement(A) ::= openforinstatement(U). { A = U; }

        %type openifstatement { ast::Statement * }
        openifstatement(A) ::= If LParenthesis expression(U) RParenthesis statement(V). { A = new ast::stmt::ctrl::If( U, V ); }
        openifstatement(A) ::= If LParenthesis expression(U) RParenthesis closedstatement(V) Else openstatement(W). { A = new ast::stmt::ctrl::If( U, V, W ); }

        %type openwhilestatement { ast::Statement * }
        openwhilestatement(A) ::= While LParenthesis expression(U) RParenthesis statement(V). { A = new ast::stmt::ctrl::While( U, V ); }
        openwhilestatement(A) ::= While LParenthesis expression(U) RParenthesis closedstatement(V) Else openstatement(W). { A = new ast::stmt::ctrl::While( U, V, W ); }

        %type openuntilstatement { ast::Statement * }
        openuntilstatement(A) ::= Until LParenthesis expression(U) RParenthesis statement(V). { A = new ast::stmt::ctrl::Until( U, V ); }
        openuntilstatement(A) ::= Until LParenthesis expression(U) RParenthesis closedstatement(V) Else openstatement(W). { A = new ast::stmt::ctrl::Until( U, V, W ); }

        %type openforinstatement { ast::Statement * }
        openforinstatement(A) ::= For LParenthesis Var Identifier(U) In expression(V) RParenthesis statement(W). { A = new ast::stmt::ctrl::ForIn( U->as< std::string >( ), V, W ); }
        openforinstatement(A) ::= For LParenthesis Var Identifier(U) In expression(V) RParenthesis closedstatement(W) Else openstatement(X). { A = new ast::stmt::ctrl::ForIn( U->as< std::string >( ), V, W, X ); }

    %type closedstatement { ast::Statement * }
    closedstatement(A) ::= simplestatement(U). { A = U; }
    closedstatement(A) ::= closedifstatement(U). { A = U; }
    closedstatement(A) ::= closedwhilestatement(U). { A = U; }
    closedstatement(A) ::= closeduntilstatement(U). { A = U; }
    closedstatement(A) ::= closedforinstatement(U). { A = U; }

        %type closedifstatement { ast::Statement * }
        closedifstatement(A) ::= If LParenthesis expression(U) RParenthesis closedstatement(V) Else closedstatement(W). { A = new ast::stmt::ctrl::If( U, V, W ); }

        %type closedwhilestatement { ast::Statement * }
        closedwhilestatement(A) ::= While LParenthesis expression(U) RParenthesis closedstatement(V) Else closedstatement(W). { A = new ast::stmt::ctrl::While( U, V, W ); }

        %type closeduntilstatement { ast::Statement * }
        closeduntilstatement(A) ::= Until LParenthesis expression(U) RParenthesis closedstatement(V) Else closedstatement(W). { A = new ast::stmt::ctrl::Until( U, V, W ); }

        %type closedforinstatement { ast::Statement * }
        closedforinstatement(A) ::= For LParenthesis Var Identifier(U) In expression(V) RParenthesis closedstatement(W) Else closedstatement(X). { A = new ast::stmt::ctrl::ForIn( U->as< std::string >( ), V, W, X ); }

    %type simplestatement { ast::Statement * }
    simplestatement(A) ::= expressionstatement(U). { A = U; }
    simplestatement(A) ::= returnstatement(U). { A = U; }
    simplestatement(A) ::= throwstatement(U). { A = U; }
    simplestatement(A) ::= declarationstatement(U). { A = U; }

        %type expressionstatement { ast::stmt::Expression * }
        expressionstatement(A) ::= expression(U) Semicolon. { A = new ast::stmt::Expression( U ); }

        %type returnstatement { ast::stmt::Return * }
        returnstatement(A) ::= Return expression(U) Semicolon. { A = new ast::stmt::Return( U ); }
        returnstatement(A) ::= Return Semicolon. { A = new ast::stmt::Return( ); }

        %type throwstatement { ast::stmt::Throw * }
        throwstatement(A) ::= Throw expression(U) Semicolon. { A = new ast::stmt::Throw( U ); }

        %type declarationstatement { ast::Statement * }
        declarationstatement(A) ::= variablesdeclaration(U). { A = U; }
        declarationstatement(A) ::= functiondeclaration(U). { A = U; }
        declarationstatement(A) ::= classdeclaration(U). { A = U; }

            %type variablesdeclaration { ast::stmt::decl::Variables * }
            variablesdeclaration(A) ::= Var variabledeclarationlist(U) Semicolon. { A = new ast::stmt::decl::Variables( U ); }

                %type variabledeclarationlist { ast::stmt::decl::Variables::Variable * }
                variabledeclarationlist(A) ::= variabledeclarationitem(U) Comma variabledeclarationlist(V). { A = U; U->next( V ); }
                variabledeclarationlist(A) ::= variabledeclarationitem(U). { A = U; }

                    %type variabledeclarationitem { ast::stmt::decl::Variables::Variable * }
                    variabledeclarationitem(A) ::= variabledeclaration(U). { A = U; }

                        %type variabledeclaration { ast::stmt::decl::Variables::Variable * }
                        variabledeclaration(A) ::= Identifier(U) Assignment expression(V). { A = new ast::stmt::decl::Variables::Variable( U->as< std::string >( ), V ); }
                        variabledeclaration(A) ::= Identifier(U). { A = new ast::stmt::decl::Variables::Variable( U->as< std::string >( ) ); }

            %type functiondeclaration { ast::stmt::decl::Function * }
            functiondeclaration(A) ::= Function Identifier(U) parameters(V) statementblock(W). { A = new ast::stmt::decl::Function( U->as< std::string >( ), new ast::expr::literal::Function( V, W ) ); }

            %type classdeclaration { ast::stmt::decl::Class * }
            classdeclaration(A) ::= Class Identifier(U) classblock(V). { A = new ast::stmt::decl::Class( U->as< std::string >( ), new ast::expr::literal::Class( V ) ); }
            classdeclaration(A) ::= Class Identifier(U) Extending expression(V) classblock(W). { A = new ast::stmt::decl::Class( U->as< std::string >( ), new ast::expr::literal::Class( W, V ) ); }

%type expression { ast::Expression * }
expression(A) ::= LParenthesis expression(U) RParenthesis. { A = U; }
expression(A) ::= conditional(U). { A = U; }
expression(A) ::= dynamic(U). { A = U; }
expression(A) ::= literal(U). { A = U; }
expression(A) ::= operation(U). { A = U; }

    %type conditional { ast::Expression * }
    conditional(A) ::= expression(U) QuestionMark expression(V) Colon expression(W). [Conditional] { A = new ast::expr::Conditional( U, V, W ); }

    %type dynamic { ast::Expression * }
    dynamic(A) ::= Extern Identifier(U). { A = new ast::expr::External( U->as< std::string >( ) ); }
    dynamic(A) ::= Identifier(U). { A = new ast::expr::Variable( U->as< std::string >( ) ); }

    %type literal { ast::Expression * }
    literal(A) ::= undefinedliteral(U). { A = U; }
    literal(A) ::= nullliteral(U). { A = U; }
    literal(A) ::= boolliteral(U). { A = U; }
    literal(A) ::= stringliteral(U). { A = U; }
    literal(A) ::= numberliteral(U). { A = U; }
    literal(A) ::= listliteral(U). { A = U; }
    literal(A) ::= dictliteral(U). { A = U; }
    literal(A) ::= functionliteral(U). { A = U; }
    literal(A) ::= classliteral(U). { A = U; }

        %type undefinedliteral { ast::expr::literal::Undefined * }
        undefinedliteral(A) ::= Undefined. { A = new ast::expr::literal::Undefined( ); }

        %type nullliteral { ast::expr::literal::Null * }
        nullliteral(A) ::= Null. { A = new ast::expr::literal::Null( ); }

        %type boolliteral { ast::expr::literal::Boolean * }
        boolliteral(A) ::= True. { A = new ast::expr::literal::Boolean( true ); }
        boolliteral(A) ::= False. { A = new ast::expr::literal::Boolean( false ); }

        %type stringliteral { ast::expr::literal::String * }
        stringliteral(A) ::= String(U). { A = new ast::expr::literal::String( ast::expr::literal::String::parse( U->as< std::string >( ) ) ); }

        %type numberliteral { ast::expr::literal::Number * }
        numberliteral(A) ::= Number(U). { A = new ast::expr::literal::Number( std::stod( U->as< std::string >( ) ) ); }
        numberliteral(A) ::= Number2(U). { A = new ast::expr::literal::Number( std::stoll( U->as< std::string >( ), nullptr, 2 ) ); }
        numberliteral(A) ::= Number8(U). { A = new ast::expr::literal::Number( std::stoll( U->as< std::string >( ), nullptr, 8 ) ); }
        numberliteral(A) ::= Number10(U). { A = new ast::expr::literal::Number( std::stoll( U->as< std::string >( ), nullptr, 10 ) ); }
        numberliteral(A) ::= Number16(U). { A = new ast::expr::literal::Number( std::stoll( U->as< std::string >( ), nullptr, 16 ) ); }

        %type listliteral { ast::expr::literal::List * }
        listliteral(A) ::= LBracket listlist(U) RBracket. { A = new ast::expr::literal::List( U ); }

            %type listlist { ast::expr::literal::List::Item * }
            listlist(A) ::= listitem(U) listnextitem(V). { A = U; U->next( V ); }
            listlist(A) ::= . { A = nullptr; }

                %type listnextitem { ast::expr::literal::List::Item * }
                listnextitem(A) ::= Comma listlist(U). { A = U; }
                listnextitem(A) ::= . { A = nullptr; }

                %type listitem { ast::expr::literal::List::Item * }
                listitem(A) ::= expression(U). { A = new ast::expr::literal::List::Item( U ); }

        %type dictliteral { ast::expr::literal::Dict * }
        dictliteral(A) ::= LBrace dictlist(U) RBrace. { A = new ast::expr::literal::Dict( U ); }

            %type dictlist { ast::expr::literal::Dict::Item * }
            dictlist(A) ::= dictitem(U) dictnextitem(V). { A = U; U->next( V ); }
            dictlist(A) ::= . { A = nullptr; }

                %type dictnextitem { ast::expr::literal::Dict::Item * }
                dictnextitem(A) ::= Comma dictlist(U). { A = U; }
                dictnextitem(A) ::= . { A = nullptr; }

                %type dictitem { ast::expr::literal::Dict::Item * }
                dictitem(A) ::= Identifer(U) Colon expression(V). { A = new ast::expr::literal::Dict::Item( U->as< std::string >( ), V ); }

        %type functionliteral { ast::expr::literal::Function * }
        functionliteral(A) ::= Function parameters(U) statementblock(V). { A = new ast::expr::literal::Function( U, V ); }

            %type parameters { ast::expr::literal::Function::Parameter * }
            parameters(A) ::= LParenthesis parameterlist(U) RParenthesis. { A = U; }

                %type parameterlist { ast::expr::literal::Function::Parameter * }
                parameterlist(A) ::= parameteritem(U) parameternextitem(V). { A = U; U->next( V ); }
                parameterlist(A) ::= . { A = nullptr; }

                    %type parameternextitem { ast::expr::literal::Function::Parameter * }
                    parameternextitem(A) ::= Comma parameterlist(U). { A = U; }
                    parameternextitem(A) ::= . { A = nullptr; }

                    %type parameteritem { ast::expr::literal::Function::Parameter * }
                    parameteritem(A) ::= Identifier(U). { A = new ast::expr::literal::Function::Parameter( U->as< std::string >( ) ); }

        %type classliteral { ast::expr::literal::Class * }
        classliteral(A) ::= Class classblock(U). { A = new ast::expr::literal::Class( U ); }

            %type classblock { ast::expr::literal::Class::Member * }
            classblock(A) ::= LBrace memberlist(U) RBrace. { A = U; }

                %type memberlist { ast::expr::literal::Class::Member * }
                memberlist(A) ::= memberitem(U) memberlist(V). { A = U; U->next( V ); }
                memberlist(A) ::= . { A = nullptr; }

                    %type memberitem { ast::expr::literal::Class::Member * }
                    memberitem(A) ::= member(U). { A = U; }

                        %type member { ast::expr::literal::Class::Member * }
                        member(A) ::= attribute(U). { A = U; }
                        member(A) ::= method(U). { A = U; }
                        member(A) ::= constructor(U). { A = U; }
                        member(A) ::= operator(U). { A = U; }

                            %type attribute { ast::expr::literal::Class::Attribute * }
                            attribute(A) ::= visibility(U) storage(V) Var Identifier(W) Assignment expression(X) Semicolon. { A = new ast::expr::literal::Class::Attribute( U, V, W->as< std::string >( ), X ); }
                            attribute(A) ::= visibility(U) storage(V) Var Identifier(W) Semicolon. { A = new ast::expr::literal::Class::Attribute( U, V, W->as< std::string >( ) ); }

                            %type method { ast::expr::literal::Class::Method * }
                            method(A) ::= visibility(U) storage(V) Function Identifier(W) parameters(X) statementblock(Y). { A = new ast::expr::literal::Class::Method( U, V, W->as< std::string >( ), new ast::expr::literal::Function( X, Y ) ); }

                            %type constructor { ast::expr::literal::Class::Constructor * }
                            constructor(A) ::= visibility(U) Constructor parameters(V) statementblock(W). { A = new ast::expr::literal::Class::Constructor( U, new ast::expr::literal::Function( V, W ) ); }

                            %type operator { ast::expr::literal::Class::Operator * }
                            operator(A) ::= visibility Operator parameters statementblock. { A = nullptr; }

                                %type visibility { ast::expr::literal::Class::Member::Visibility }
                                visibility(A) ::= Public. { A = ast::expr::literal::Class::Member::Visibility::Public; }
                                visibility(A) ::= Protected. { A = ast::expr::literal::Class::Member::Visibility::Protected; }
                                visibility(A) ::= Private. { A = ast::expr::literal::Class::Member::Visibility::Private; }

                                %type storage { ast::expr::literal::Class::Member::Host }
                                storage(A) ::= Static. { A = ast::expr::literal::Class::Member::Host::Class; }
                                storage(A) ::= . { A = ast::expr::literal::Class::Member::Host::Instance; }

    %type operation { ast::Expression * }
    operation(A) ::= unaryoperation(U). { A = U; }
    operation(A) ::= binaryoperation(U). { A = U; }
    operation(A) ::= multaryoperation(U). { A = U; }

        %type unaryoperation { ast::Expression * }
        unaryoperation(A) ::= Not expression(U). { A = new ast::expr::Unary( ast::expr::Unary::Operator::Not, U ); }

        unaryoperation(A) ::= BitwiseNot expression(U). { A = new ast::expr::Unary( ast::expr::Unary::Operator::BitwiseNot, U ); }

        unaryoperation(A) ::= Plus expression(U). [Positive] { A = new ast::expr::Unary( ast::expr::Unary::Operator::Positive, U ); }
        unaryoperation(A) ::= Minus expression(U). [Negative] { A = new ast::expr::Unary( ast::expr::Unary::Operator::Negative, U ); }

        unaryoperation(A) ::= Incrementation expression(U). [PreIncrementation] { A = new ast::expr::Unary( ast::expr::Unary::Operator::PreIncrementation, U ); }
        unaryoperation(A) ::= Decrementation expression(U). [PreDecrementation] { A = new ast::expr::Unary( ast::expr::Unary::Operator::PreDecrementation, U ); }

        unaryoperation(A) ::= expression(U) Incrementation. [PostIncrementation] { A = new ast::expr::Unary( ast::expr::Unary::Operator::PostIncrementation, U ); }
        unaryoperation(A) ::= expression(U) Decrementation. [PostDecrementation] { A = new ast::expr::Unary( ast::expr::Unary::Operator::PostDecrementation, U ); }

        %type binaryoperation { ast::Expression * }
        binaryoperation(A) ::= expression(U) Plus expression(V). [Addition] { A = new ast::expr::Binary( ast::expr::Binary::Operator::Addition, U, V ); }
        binaryoperation(A) ::= expression(U) Minus expression(V). [Substraction] { A = new ast::expr::Binary( ast::expr::Binary::Operator::Substraction, U, V ); }
        binaryoperation(A) ::= expression(U) Multiplication expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::Multiplication, U, V ); }
        binaryoperation(A) ::= expression(U) Division expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::Division, U, V ); }
        binaryoperation(A) ::= expression(U) Modulo expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::Modulo, U, V ); }

        binaryoperation(A) ::= expression(U) Lesser expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::Lesser, U, V ); }
        binaryoperation(A) ::= expression(U) Greater expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::Greater, U, V ); }
        binaryoperation(A) ::= expression(U) LesserOrEqual expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::LesserOrEqual, U, V ); }
        binaryoperation(A) ::= expression(U) GreaterOrEqual expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::GreaterOrEqual, U, V ); }
        binaryoperation(A) ::= expression(U) Equal expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::Equal, U, V ); }
        binaryoperation(A) ::= expression(U) NotEqual expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::NotEqual, U, V ); }

        binaryoperation(A) ::= expression(U) LeftShift expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::LeftShift, U, V ); }
        binaryoperation(A) ::= expression(U) RightShift expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::RightShift, U, V ); }
        binaryoperation(A) ::= expression(U) BitwiseAnd expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::BitwiseAnd, U, V ); }
        binaryoperation(A) ::= expression(U) BitwiseOr expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::BitwiseOr, U, V ); }
        binaryoperation(A) ::= expression(U) BitwiseXOr expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::BitwiseXOr, U, V ); }

        binaryoperation(A) ::= expression(U) Dot Identifier(V). [Member] { A = new ast::expr::Binary( ast::expr::Binary::Operator::Member, U, new ast::expr::literal::String( V->as< std::string >( ) ) ); }

        binaryoperation(A) ::= expression(U) Assignment expression(V). { A = new ast::expr::Binary( ast::expr::Binary::Operator::Assignment, U, V ); }

        %type multaryoperation { ast::Expression * }
        multaryoperation(A) ::= expression(U) LBracket expression(V) RBracket. [Subscript] { A = new ast::expr::Multary( ast::expr::Multary::Operator::Subscript, U ); U->next( V ); }
        multaryoperation(A) ::= expression(U) arguments(V). [Call] { A = new ast::expr::Multary( ast::expr::Multary::Operator::Call, U ); U->next( V ); }
        multaryoperation(A) ::= New expression(U) arguments(V). [New] { A = new ast::expr::Multary( ast::expr::Multary::Operator::New, U ); U->next( V ); }
        multaryoperation(A) ::= Require expression(U) arguments(V). [Require] { A = new ast::expr::Multary( ast::expr::Multary::Operator::Require, U ); U->next( V ); }

            %type arguments { ast::Expression * }
            arguments(A) ::= LParenthesis argumentlist(U) RParenthesis. { A = U; }

                %type argumentlist { ast::Expression * }
                argumentlist(A) ::= argumentfirst(U) argumentnext(V). { A = U; U->next( V ); }
                argumentlist(A) ::= argumentnext(U). { A = U; }

                    %type argumentfirst { ast::Expression * }
                    argumentfirst(A) ::= expression(U). { A = U; }

                    %type argumentnext { ast::Expression * }
                    argumentnext(A) ::= Comma expression(U) argumentnext(V). { A = U; U->next( V ); }
                    argumentnext(A) ::= . { A = nullptr; }
